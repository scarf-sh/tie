Test/Api.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Api where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.ByteString.Builder as Builder
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData

import Test.Request
import Test.Response



import Test.Schemas.Package

import Test.Response.Dummy

data Api m = Api {
    -- | Dummy route
    dummy ::
        -- @entity@
        Data.Text.Text ->
        m DummyResponse
}

application :: (Control.Monad.IO.Class.MonadIO m) => (forall a . Network.Wai.Request -> m a -> IO a) -> Api m -> Network.Wai.Application -> Network.Wai.Application
application run api notFound request respond =
    case Network.Wai.pathInfo request of
        ["v2", __entity, "packages"] ->
            pathVariable __entity (\__entity request respond ->
                case Network.Wai.requestMethod request of
                    "GET" ->
                        run request (do
                            response <- dummy api __entity
                            Control.Monad.IO.Class.liftIO (respond $! (toResponse response))
                        )
                    x ->
                        unsupportedMethod x) request respond

        _ ->
            notFound request respond
    where
        unsupportedMethod _ =
            respond (Network.Wai.responseBuilder Network.HTTP.Types.status405 [] mempty)
{-# INLINABLE application #-}
---------------------
Test/Request.hs

{-# LANGUAGE OverloadedStrings #-}

module Test.Request
  ( -- * Parameters
    Style (..),
    pathVariable,
    requiredQueryParameter,
    requiredQueryParameters,
    optionalQueryParameter,
    optionalQueryParameters,
    requiredHeader,
    optionalHeader,

    -- * Request body
    parseRequestBody,
    jsonBodyParser,
    formBodyParser,
  )
where

import qualified Data.Aeson
import qualified Data.Aeson.Types
import Data.Attoparsec.ByteString (eitherResult, parseWith)
import Data.ByteString (ByteString)
import qualified Data.ByteString as ByteString
import qualified Data.ByteString.Lazy as LBS
import Data.Coerce (coerce)
import qualified Data.HashMap.Strict as HashMap
import qualified Data.List as List
import qualified Data.List.NonEmpty as NonEmpty
import Data.Maybe (fromMaybe)
import Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Network.HTTP.Media
import Network.HTTP.Types (HeaderName, hContentType)
import qualified Network.Wai as Wai
import System.IO.Unsafe (unsafeInterleaveIO)
import Web.FormUrlEncoded
  ( FromForm,
    parseAll,
    urlDecodeAsForm,
    urlDecodeForm,
  )
import Web.HttpApiData
  ( FromHttpApiData,
    parseHeader,
    parseQueryParam,
    parseUrlPiece,
    parseUrlPieces,
  )

pathVariable ::
  (FromHttpApiData a) =>
  -- | Path variable value
  Text ->
  (a -> Wai.Application) ->
  Wai.Application
pathVariable value withVariable = \request respond ->
  case parseUrlPiece value of
    Left _err ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Right x ->
      withVariable x request respond
{-# INLINEABLE pathVariable #-}

data Style
  = FormStyle
  | CommaDelimitedStyle
  | SpaceDelimitedStyle
  | PipeDelimitedStyle

newtype CommaDelimitedValue a = CommaDelimitedValue {unCommaDelimitedValue :: [a]}

instance (FromHttpApiData a) => FromHttpApiData (CommaDelimitedValue a) where
  parseUrlPiece input = do
    xs <- parseUrlPieces (Text.splitOn "," input)
    pure (CommaDelimitedValue xs)

newtype SpaceDelimitedValue a = SpaceDelimitedValue {unSpaceDelimitedValue :: [a]}

instance (FromHttpApiData a) => FromHttpApiData (SpaceDelimitedValue a) where
  parseUrlPiece input = do
    xs <- parseUrlPieces (Text.splitOn " " input)
    pure (SpaceDelimitedValue xs)

newtype PipeDelimitedValue a = PipeDelimitedValue {unPipeDelimitedValue :: [a]}

instance (FromHttpApiData a) => FromHttpApiData (PipeDelimitedValue a) where
  parseUrlPiece input = do
    xs <- parseUrlPieces (Text.splitOn "|" input)
    pure (PipeDelimitedValue xs)

requiredQueryParameters ::
  (FromHttpApiData a) =>
  Style ->
  ByteString ->
  (NonEmpty.NonEmpty a -> Wai.Application) ->
  Wai.Application
requiredQueryParameters style name withParam =
  case style of
    FormStyle -> \request respond ->
      case urlDecodeForm (LBS.fromStrict (ByteString.drop 1 (Wai.rawQueryString request))) of
        Left error ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right form ->
          case parseAll (Text.decodeUtf8 name) form of
            Left _ ->
              respond (Wai.responseBuilder (toEnum 400) [] mempty)
            Right [] ->
              respond (Wai.responseBuilder (toEnum 400) [] mempty)
            Right (x : xs) ->
              withParam (x NonEmpty.:| xs) request respond
    SpaceDelimitedStyle ->
      requiredQueryParameter
        name
        ( \xs -> \request respond ->
            case NonEmpty.nonEmpty (unSpaceDelimitedValue xs) of
              Nothing ->
                respond (Wai.responseBuilder (toEnum 400) [] mempty)
              Just xs ->
                withParam xs request respond
        )
    PipeDelimitedStyle ->
      requiredQueryParameter
        name
        ( \xs -> \request respond ->
            case NonEmpty.nonEmpty (unPipeDelimitedValue xs) of
              Nothing ->
                respond (Wai.responseBuilder (toEnum 400) [] mempty)
              Just xs ->
                withParam xs request respond
        )
    CommaDelimitedStyle ->
      requiredQueryParameter
        name
        ( \xs -> \request respond ->
            case NonEmpty.nonEmpty (unCommaDelimitedValue xs) of
              Nothing ->
                respond (Wai.responseBuilder (toEnum 400) [] mempty)
              Just xs ->
                withParam xs request respond
        )

optionalQueryParameters ::
  (FromHttpApiData a) =>
  Style ->
  ByteString ->
  (Maybe (NonEmpty.NonEmpty a) -> Wai.Application) ->
  Wai.Application
optionalQueryParameters style name withParam =
  case style of
    FormStyle -> \request respond ->
      case urlDecodeForm (LBS.fromStrict (ByteString.drop 1 (Wai.rawQueryString request))) of
        Left error ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right form ->
          case parseAll (Text.decodeUtf8 name) form of
            Left _ ->
              respond (Wai.responseBuilder (toEnum 400) [] mempty)
            Right [] ->
              withParam Nothing request respond
            Right (x : xs) ->
              withParam (Just (x NonEmpty.:| xs)) request respond
    SpaceDelimitedStyle ->
      optionalQueryParameter
        name
        False
        ( \xs ->
            withParam (xs >>= NonEmpty.nonEmpty . unSpaceDelimitedValue)
        )
    PipeDelimitedStyle ->
      optionalQueryParameter
        name
        False
        ( \xs ->
            withParam (xs >>= NonEmpty.nonEmpty . unPipeDelimitedValue)
        )
    CommaDelimitedStyle ->
      optionalQueryParameter
        name
        False
        ( \xs ->
            withParam (xs >>= NonEmpty.nonEmpty . unCommaDelimitedValue)
        )

requiredQueryParameter ::
  (FromHttpApiData a) =>
  ByteString ->
  (a -> Wai.Application) ->
  Wai.Application
requiredQueryParameter name withParam = \request respond ->
  case List.lookup name (Wai.queryString request) of
    Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] ("Missing query parameter: " <> Builder.byteString name))
    Just Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] ("Missing query parameter: " <> Builder.byteString name))
    Just (Just value) ->
      case parseQueryParam (Text.decodeUtf8 value) of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] ("Unable to recognize query parameter: " <> Builder.byteString name))
        Right x ->
          withParam x request respond
{-# INLINEABLE requiredQueryParameter #-}

optionalQueryParameter ::
  (FromHttpApiData a) =>
  ByteString ->
  -- | Allow empty, e.g. "x="
  Bool ->
  (Maybe a -> Wai.Application) ->
  Wai.Application
optionalQueryParameter name allowEmpty withParam = \request respond ->
  case List.lookup name (Wai.queryString request) of
    Nothing ->
      withParam Nothing request respond
    Just Nothing
      | allowEmpty ->
          withParam Nothing request respond
      | otherwise ->
          respond (Wai.responseBuilder (toEnum 400) [] ("Missing query parameter: " <> Builder.byteString name))
    Just (Just value) ->
      case parseQueryParam (Text.decodeUtf8 value) of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] ("Unable to recognize query parameter: " <> Builder.byteString name))
        Right x ->
          withParam (Just x) request respond
{-# INLINEABLE optionalQueryParameter #-}

optionalHeader ::
  (FromHttpApiData a) =>
  HeaderName ->
  (Maybe a -> Wai.Application) ->
  Wai.Application
optionalHeader name withHeader = \request respond ->
  case List.lookup name (Wai.requestHeaders request) of
    Nothing ->
      withHeader Nothing request respond
    Just value ->
      case parseHeader value of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right x ->
          withHeader (Just x) request respond
{-# INLINEABLE optionalHeader #-}

requiredHeader ::
  (FromHttpApiData a) =>
  HeaderName ->
  (a -> Wai.Application) ->
  Wai.Application
requiredHeader name withHeader = \request respond ->
  case List.lookup name (Wai.requestHeaders request) of
    Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Just value ->
      case parseHeader value of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right x ->
          withHeader x request respond
{-# INLINEABLE requiredHeader #-}

data BodyParser a
  = BodyParser
      Network.HTTP.Media.MediaType
      ((a -> Wai.Application) -> Wai.Application)

jsonBodyParser :: (Data.Aeson.FromJSON a) => BodyParser a
jsonBodyParser = BodyParser "application/json" parseRequestBodyJSON
{-# INLINE jsonBodyParser #-}

formBodyParser :: (FromForm a) => BodyParser a
formBodyParser = BodyParser "application/xxx-form-urlencoded" parseRequestBodyForm
{-# INLINE formBodyParser #-}

parseRequestBody :: [BodyParser a] -> (a -> Wai.Application) -> Wai.Application
parseRequestBody parsers withBody = \request respond -> do
  let contentType =
        fromMaybe
          "application/octet-stream"
          (List.lookup hContentType (Wai.requestHeaders request))

      bodyParser =
        Network.HTTP.Media.mapAccept
          [(mediaType, parser) | BodyParser mediaType parser <- parsers]
          contentType

  case bodyParser of
    Just parseBody ->
      parseBody withBody request respond
    Nothing ->
      respond (Wai.responseBuilder (toEnum 415) [] mempty)
{-# INLINE parseRequestBody #-}

parseRequestBodyJSON :: (Data.Aeson.FromJSON a) => (a -> Wai.Application) -> Wai.Application
parseRequestBodyJSON withBody = \request respond -> do
  body <- Wai.lazyRequestBody request
  case Data.Aeson.decode' body of
    Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Just body ->
      withBody body request respond
{-# INLINEABLE parseRequestBodyJSON #-}

parseRequestBodyForm :: (FromForm a) => (a -> Wai.Application) -> Wai.Application
parseRequestBodyForm withBody = \request respond -> do
  body <- Wai.lazyRequestBody request
  case urlDecodeAsForm body of
    Left _err ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Right form ->
      withBody form request respond
{-# INLINEABLE parseRequestBodyForm #-}

---------------------
Test/Response.hs

module Test.Response
  ( ToResponse (..),

    -- * NDJSON support
    NDJSON,
    responseNDJSON,
  )
where

import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.ByteString.Builder
import qualified Network.HTTP.Types
import qualified Network.Wai

type NDJSON element = ((element -> IO ()) -> IO () -> IO ())

responseNDJSON :: (Data.Aeson.ToJSON element) => Network.HTTP.Types.Status -> Network.HTTP.Types.ResponseHeaders -> NDJSON element -> Network.Wai.Response
responseNDJSON status responseHeaders stream =
  Network.Wai.responseStream status responseHeaders $ \emit flush ->
    stream
      ( \element ->
          emit
            ( Data.Aeson.Encoding.fromEncoding (Data.Aeson.toEncoding element)
                <> Data.ByteString.Builder.char7 '\n'
            )
      )
      flush

class ToResponse a where
  toResponse :: a -> Network.Wai.Response

---------------------
Test/Response/Dummy.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Response.Dummy where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData

import Test.Schemas.Package

import Test.Response

data DummyResponse
    = DummyResponse200 Package
    deriving (Show)

instance ToResponse DummyResponse where
    toResponse (DummyResponse200 x) =
        Network.Wai.responseBuilder Network.HTTP.Types.status200 ([(Network.HTTP.Types.hContentType, "application/json")]) (Data.Aeson.fromEncoding (Data.Aeson.toEncoding x))

instance GHC.Records.HasField "status" DummyResponse Network.HTTP.Types.Status where
    getField (DummyResponse200 {}) = Network.HTTP.Types.status200
---------------------
Test/Schemas/DockerPackage.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.DockerPackage where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.PackageBase
import Test.Schemas.PackageType

data DockerPackage = DockerPackage
    {
        backendRegistry :: (Data.Maybe.Maybe (Data.Text.Text)),
        id :: Data.Text.Text,
        image :: (Data.Maybe.Maybe (Data.Text.Text)),
        longDescription :: (Data.Maybe.Maybe (Data.Text.Text)),
        name :: Data.Text.Text,
        shortDescription :: Data.Text.Text,
        type' :: PackageType,
        website :: (Data.Maybe.Maybe (Data.Text.Text))
    }
    deriving (Show)

instance Data.Aeson.ToJSON DockerPackage where
    toJSON DockerPackage {..} = Data.Aeson.object
        ([ "id" Data.Aeson..= id,
           "name" Data.Aeson..= name,
           "short_description" Data.Aeson..= shortDescription,
           "type" Data.Aeson..= type'
        ]
        ++ [ "backend_registry" Data.Aeson..= backendRegistry | Just backendRegistry <- [backendRegistry] ]
        ++ [ "image" Data.Aeson..= image | Just image <- [image] ]
        ++ [ "long_description" Data.Aeson..= longDescription | Just longDescription <- [longDescription] ]
        ++ [ "website" Data.Aeson..= website | Just website <- [website] ])

    toEncoding DockerPackage {..} = Data.Aeson.Encoding.pairs
        ( maybe mempty (Data.Aeson.Encoding.pair "backend_registry" . Data.Aeson.toEncoding) backendRegistry <>
          Data.Aeson.Encoding.pair "id" (Data.Aeson.toEncoding id) <>
          maybe mempty (Data.Aeson.Encoding.pair "image" . Data.Aeson.toEncoding) image <>
          maybe mempty (Data.Aeson.Encoding.pair "long_description" . Data.Aeson.toEncoding) longDescription <>
          Data.Aeson.Encoding.pair "name" (Data.Aeson.toEncoding name) <>
          Data.Aeson.Encoding.pair "short_description" (Data.Aeson.toEncoding shortDescription) <>
          Data.Aeson.Encoding.pair "type" (Data.Aeson.toEncoding type') <>
          maybe mempty (Data.Aeson.Encoding.pair "website" . Data.Aeson.toEncoding) website
        )

instance Data.Aeson.FromJSON DockerPackage where
    parseJSON = Data.Aeson.withObject "DockerPackage" $ \o ->
        DockerPackage
            <$> o Data.Aeson..:? "backend_registry"
            <*> o Data.Aeson..: "id"
            <*> o Data.Aeson..:? "image"
            <*> o Data.Aeson..:? "long_description"
            <*> o Data.Aeson..: "name"
            <*> o Data.Aeson..: "short_description"
            <*> o Data.Aeson..: "type"
            <*> o Data.Aeson..:? "website"
---------------------
Test/Schemas/FilePackage.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.FilePackage where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.PackageBase
import Test.Schemas.PackageType

data FilePackage = FilePackage
    {
        id :: Data.Text.Text,
        incomingPath :: Data.Text.Text,
        longDescription :: (Data.Maybe.Maybe (Data.Text.Text)),
        name :: Data.Text.Text,
        outgoingUrl :: Data.Text.Text,
        shortDescription :: Data.Text.Text,
        type' :: PackageType,
        website :: (Data.Maybe.Maybe (Data.Text.Text))
    }
    deriving (Show)

instance Data.Aeson.ToJSON FilePackage where
    toJSON FilePackage {..} = Data.Aeson.object
        ([ "id" Data.Aeson..= id,
           "incoming_path" Data.Aeson..= incomingPath,
           "name" Data.Aeson..= name,
           "outgoing_url" Data.Aeson..= outgoingUrl,
           "short_description" Data.Aeson..= shortDescription,
           "type" Data.Aeson..= type'
        ]
        ++ [ "long_description" Data.Aeson..= longDescription | Just longDescription <- [longDescription] ]
        ++ [ "website" Data.Aeson..= website | Just website <- [website] ])

    toEncoding FilePackage {..} = Data.Aeson.Encoding.pairs
        ( Data.Aeson.Encoding.pair "id" (Data.Aeson.toEncoding id) <>
          Data.Aeson.Encoding.pair "incoming_path" (Data.Aeson.toEncoding incomingPath) <>
          maybe mempty (Data.Aeson.Encoding.pair "long_description" . Data.Aeson.toEncoding) longDescription <>
          Data.Aeson.Encoding.pair "name" (Data.Aeson.toEncoding name) <>
          Data.Aeson.Encoding.pair "outgoing_url" (Data.Aeson.toEncoding outgoingUrl) <>
          Data.Aeson.Encoding.pair "short_description" (Data.Aeson.toEncoding shortDescription) <>
          Data.Aeson.Encoding.pair "type" (Data.Aeson.toEncoding type') <>
          maybe mempty (Data.Aeson.Encoding.pair "website" . Data.Aeson.toEncoding) website
        )

instance Data.Aeson.FromJSON FilePackage where
    parseJSON = Data.Aeson.withObject "FilePackage" $ \o ->
        FilePackage
            <$> o Data.Aeson..: "id"
            <*> o Data.Aeson..: "incoming_path"
            <*> o Data.Aeson..:? "long_description"
            <*> o Data.Aeson..: "name"
            <*> o Data.Aeson..: "outgoing_url"
            <*> o Data.Aeson..: "short_description"
            <*> o Data.Aeson..: "type"
            <*> o Data.Aeson..:? "website"
---------------------
Test/Schemas/Package.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.Package where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.DockerPackage
import Test.Schemas.FilePackage

data Package
    = PackageFilePackage FilePackage
    | PackageDockerPackage DockerPackage
    deriving (Show)

instance Data.Aeson.ToJSON Package where
    toJSON (PackageFilePackage x) = Data.Aeson.toJSON x
    toJSON (PackageDockerPackage x) = Data.Aeson.toJSON x

    toEncoding (PackageFilePackage x) = Data.Aeson.toEncoding x
    toEncoding (PackageDockerPackage x) = Data.Aeson.toEncoding x

instance Data.Aeson.FromJSON Package where
    parseJSON x =
        (PackageFilePackage <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (PackageDockerPackage <$> Data.Aeson.parseJSON x)
---------------------
Test/Schemas/PackageBase.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.PackageBase where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.PackageType

data PackageBase = PackageBase
    {
        id :: Data.Text.Text,
        longDescription :: (Data.Maybe.Maybe (Data.Text.Text)),
        name :: Data.Text.Text,
        shortDescription :: Data.Text.Text,
        type' :: PackageType,
        website :: (Data.Maybe.Maybe (Data.Text.Text))
    }
    deriving (Show)

instance Data.Aeson.ToJSON PackageBase where
    toJSON PackageBase {..} = Data.Aeson.object
        ([ "id" Data.Aeson..= id,
           "name" Data.Aeson..= name,
           "short_description" Data.Aeson..= shortDescription,
           "type" Data.Aeson..= type'
        ]
        ++ [ "long_description" Data.Aeson..= longDescription | Just longDescription <- [longDescription] ]
        ++ [ "website" Data.Aeson..= website | Just website <- [website] ])

    toEncoding PackageBase {..} = Data.Aeson.Encoding.pairs
        ( Data.Aeson.Encoding.pair "id" (Data.Aeson.toEncoding id) <>
          maybe mempty (Data.Aeson.Encoding.pair "long_description" . Data.Aeson.toEncoding) longDescription <>
          Data.Aeson.Encoding.pair "name" (Data.Aeson.toEncoding name) <>
          Data.Aeson.Encoding.pair "short_description" (Data.Aeson.toEncoding shortDescription) <>
          Data.Aeson.Encoding.pair "type" (Data.Aeson.toEncoding type') <>
          maybe mempty (Data.Aeson.Encoding.pair "website" . Data.Aeson.toEncoding) website
        )

instance Data.Aeson.FromJSON PackageBase where
    parseJSON = Data.Aeson.withObject "PackageBase" $ \o ->
        PackageBase
            <$> o Data.Aeson..: "id"
            <*> o Data.Aeson..:? "long_description"
            <*> o Data.Aeson..: "name"
            <*> o Data.Aeson..: "short_description"
            <*> o Data.Aeson..: "type"
            <*> o Data.Aeson..:? "website"
---------------------
Test/Schemas/PackageType.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.PackageType where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData





data PackageType
    = PackageTypeDocker
    | PackageTypeFile
    | PackageTypePython
    | PackageTypeNpm
    deriving (Eq, Show)

instance Data.Aeson.ToJSON PackageType where
    toJSON x = case x of
        PackageTypeDocker -> "docker"
        PackageTypeFile -> "file"
        PackageTypePython -> "python"
        PackageTypeNpm -> "npm"

    toEncoding x = case x of
        PackageTypeDocker -> Data.Aeson.Encoding.text "docker"
        PackageTypeFile -> Data.Aeson.Encoding.text "file"
        PackageTypePython -> Data.Aeson.Encoding.text "python"
        PackageTypeNpm -> Data.Aeson.Encoding.text "npm"

instance Data.Aeson.FromJSON PackageType where
    parseJSON = Data.Aeson.withText "PackageType" $ \s ->
        case s of
            "docker" -> pure PackageTypeDocker
            "file" -> pure PackageTypeFile
            "python" -> pure PackageTypePython
            "npm" -> pure PackageTypeNpm
            _ -> fail "invalid enum value"

instance Web.HttpApiData.ToHttpApiData PackageType where
    toQueryParam x = case x of
        PackageTypeDocker -> "docker"
        PackageTypeFile -> "file"
        PackageTypePython -> "python"
        PackageTypeNpm -> "npm"

instance Web.HttpApiData.FromHttpApiData PackageType where
    parseUrlPiece x =
        case x of
            "docker" -> pure PackageTypeDocker
            "file" -> pure PackageTypeFile
            "python" -> pure PackageTypePython
            "npm" -> pure PackageTypeNpm
            _ -> Left "invalid enum value"
---------------------
test.cabal

cabal-version: 3.0
name: test
version: 0.1.0.0
library
  build-depends:
    , aeson
    , attoparsec
    , base
    , bytestring
    , containers
    , ghc-prim
    , http-api-data
    , http-media
    , http-types
    , text
    , time
    , unordered-containers
    , wai
  exposed-modules:
    Test.Api
    Test.Request
    Test.Response
    Test.Response.Dummy
    Test.Schemas.DockerPackage
    Test.Schemas.FilePackage
    Test.Schemas.Package
    Test.Schemas.PackageBase
    Test.Schemas.PackageType