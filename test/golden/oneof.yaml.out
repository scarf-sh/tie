Test/Api.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Api where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData

import Test.Request
import Test.Response



import Test.Schemas.Inline
import Test.Schemas.Inline2
import Test.Schemas.PetOrPackage

import Test.Response.ListPackages
import Test.Response.ListPackages2
import Test.Response.ListPackages3

data Api m = Api {
    -- | List all packages
    listPackages ::
        m ListPackagesResponse,
    -- | List all packages
    listPackages2 ::
        m ListPackages2Response,
    -- | List all packages
    listPackages3 ::
        m ListPackages3Response
}

application :: (Control.Monad.IO.Class.MonadIO m) => (forall a . Network.Wai.Request -> m a -> IO a) -> Api m -> Network.Wai.Application -> Network.Wai.Application
application run api notFound request respond =
    case Network.Wai.pathInfo request of
        ["packages"] ->
            case Network.Wai.requestMethod request of
                "GET" ->
                    run request (do
                        response <- listPackages api
                        Control.Monad.IO.Class.liftIO (respond $! (toResponse response))
                    )
                x ->
                    unsupportedMethod x

        ["packages2"] ->
            case Network.Wai.requestMethod request of
                "GET" ->
                    run request (do
                        response <- listPackages2 api
                        Control.Monad.IO.Class.liftIO (respond $! (toResponse response))
                    )
                x ->
                    unsupportedMethod x

        ["packages3"] ->
            case Network.Wai.requestMethod request of
                "GET" ->
                    run request (do
                        response <- listPackages3 api
                        Control.Monad.IO.Class.liftIO (respond $! (toResponse response))
                    )
                x ->
                    unsupportedMethod x

        _ ->
            notFound request respond
    where
        unsupportedMethod _ =
            respond (Network.Wai.responseBuilder Network.HTTP.Types.status405 [] mempty)
{-# INLINABLE application #-}
---------------------
Test/Request.hs

{-# LANGUAGE OverloadedStrings #-}

module Test.Request
  ( -- * Parameters
    Style (..),
    pathVariable,
    requiredQueryParameter,
    requiredQueryParameters,
    optionalQueryParameter,
    optionalQueryParameters,
    requiredHeader,
    optionalHeader,

    -- * Request body
    parseRequestBody,
    jsonBodyParser,
    formBodyParser,
  )
where

import Data.Aeson (FromJSON, parseJSON)
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import Data.Attoparsec.ByteString (eitherResult, parseWith)
import Data.ByteString (ByteString)
import qualified Data.ByteString as ByteString
import qualified Data.ByteString.Lazy as LBS
import Data.Coerce (coerce)
import qualified Data.HashMap.Strict as HashMap
import qualified Data.List as List
import qualified Data.List.NonEmpty as NonEmpty
import Data.Maybe (fromMaybe)
import Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Network.HTTP.Media
import Network.HTTP.Types (HeaderName, hContentType)
import qualified Network.Wai as Wai
import System.IO.Unsafe (unsafeInterleaveIO)
import Web.FormUrlEncoded
  ( FromForm,
    parseAll,
    urlDecodeAsForm,
    urlDecodeForm,
  )
import Web.HttpApiData
  ( FromHttpApiData,
    parseHeader,
    parseQueryParam,
    parseUrlPiece,
    parseUrlPieces,
  )

pathVariable ::
  (FromHttpApiData a) =>
  -- | Path variable value
  Text ->
  (a -> Wai.Application) ->
  Wai.Application
pathVariable value withVariable = \request respond ->
  case parseUrlPiece value of
    Left _err ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Right x ->
      withVariable x request respond
{-# INLINEABLE pathVariable #-}

data Style
  = FormStyle
  | CommaDelimitedStyle
  | SpaceDelimitedStyle
  | PipeDelimitedStyle

newtype CommaDelimitedValue a = CommaDelimitedValue {unCommaDelimitedValue :: [a]}

instance (FromHttpApiData a) => FromHttpApiData (CommaDelimitedValue a) where
  parseUrlPiece input = do
    xs <- parseUrlPieces (Text.splitOn "," input)
    pure (CommaDelimitedValue xs)

newtype SpaceDelimitedValue a = SpaceDelimitedValue {unSpaceDelimitedValue :: [a]}

instance (FromHttpApiData a) => FromHttpApiData (SpaceDelimitedValue a) where
  parseUrlPiece input = do
    xs <- parseUrlPieces (Text.splitOn " " input)
    pure (SpaceDelimitedValue xs)

newtype PipeDelimitedValue a = PipeDelimitedValue {unPipeDelimitedValue :: [a]}

instance (FromHttpApiData a) => FromHttpApiData (PipeDelimitedValue a) where
  parseUrlPiece input = do
    xs <- parseUrlPieces (Text.splitOn "|" input)
    pure (PipeDelimitedValue xs)

requiredQueryParameters ::
  (FromHttpApiData a) =>
  Style ->
  ByteString ->
  (NonEmpty.NonEmpty a -> Wai.Application) ->
  Wai.Application
requiredQueryParameters style name withParam =
  case style of
    FormStyle -> \request respond ->
      case urlDecodeForm (LBS.fromStrict (ByteString.drop 1 (Wai.rawQueryString request))) of
        Left error ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right form ->
          case parseAll (Text.decodeUtf8 name) form of
            Left _ ->
              respond (Wai.responseBuilder (toEnum 400) [] mempty)
            Right [] ->
              respond (Wai.responseBuilder (toEnum 400) [] mempty)
            Right (x : xs) ->
              withParam (x NonEmpty.:| xs) request respond
    SpaceDelimitedStyle ->
      requiredQueryParameter
        name
        ( \xs -> \request respond ->
            case NonEmpty.nonEmpty (unSpaceDelimitedValue xs) of
              Nothing ->
                respond (Wai.responseBuilder (toEnum 400) [] mempty)
              Just xs ->
                withParam xs request respond
        )
    PipeDelimitedStyle ->
      requiredQueryParameter
        name
        ( \xs -> \request respond ->
            case NonEmpty.nonEmpty (unPipeDelimitedValue xs) of
              Nothing ->
                respond (Wai.responseBuilder (toEnum 400) [] mempty)
              Just xs ->
                withParam xs request respond
        )
    CommaDelimitedStyle ->
      requiredQueryParameter
        name
        ( \xs -> \request respond ->
            case NonEmpty.nonEmpty (unCommaDelimitedValue xs) of
              Nothing ->
                respond (Wai.responseBuilder (toEnum 400) [] mempty)
              Just xs ->
                withParam xs request respond
        )

optionalQueryParameters ::
  (FromHttpApiData a) =>
  Style ->
  ByteString ->
  (Maybe (NonEmpty.NonEmpty a) -> Wai.Application) ->
  Wai.Application
optionalQueryParameters style name withParam =
  case style of
    FormStyle -> \request respond ->
      case urlDecodeForm (LBS.fromStrict (ByteString.drop 1 (Wai.rawQueryString request))) of
        Left error ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right form ->
          case parseAll (Text.decodeUtf8 name) form of
            Left _ ->
              respond (Wai.responseBuilder (toEnum 400) [] mempty)
            Right [] ->
              withParam Nothing request respond
            Right (x : xs) ->
              withParam (Just (x NonEmpty.:| xs)) request respond
    SpaceDelimitedStyle ->
      optionalQueryParameter
        name
        False
        ( \xs ->
            withParam (xs >>= NonEmpty.nonEmpty . unSpaceDelimitedValue)
        )
    PipeDelimitedStyle ->
      optionalQueryParameter
        name
        False
        ( \xs ->
            withParam (xs >>= NonEmpty.nonEmpty . unPipeDelimitedValue)
        )
    CommaDelimitedStyle ->
      optionalQueryParameter
        name
        False
        ( \xs ->
            withParam (xs >>= NonEmpty.nonEmpty . unCommaDelimitedValue)
        )

requiredQueryParameter ::
  (FromHttpApiData a) =>
  ByteString ->
  (a -> Wai.Application) ->
  Wai.Application
requiredQueryParameter name withParam = \request respond ->
  case List.lookup name (Wai.queryString request) of
    Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Just Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Just (Just value) ->
      case parseQueryParam (Text.decodeUtf8 value) of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right x ->
          withParam x request respond
{-# INLINEABLE requiredQueryParameter #-}

optionalQueryParameter ::
  (FromHttpApiData a) =>
  ByteString ->
  -- | Allow empty, e.g. "x="
  Bool ->
  (Maybe a -> Wai.Application) ->
  Wai.Application
optionalQueryParameter name allowEmpty withParam = \request respond ->
  case List.lookup name (Wai.queryString request) of
    Nothing ->
      withParam Nothing request respond
    Just Nothing
      | allowEmpty ->
          withParam Nothing request respond
      | otherwise ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Just (Just value) ->
      case parseQueryParam (Text.decodeUtf8 value) of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right x ->
          withParam (Just x) request respond
{-# INLINEABLE optionalQueryParameter #-}

optionalHeader ::
  (FromHttpApiData a) =>
  HeaderName ->
  (Maybe a -> Wai.Application) ->
  Wai.Application
optionalHeader name withHeader = \request respond ->
  case List.lookup name (Wai.requestHeaders request) of
    Nothing ->
      withHeader Nothing request respond
    Just value ->
      case parseHeader value of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right x ->
          withHeader (Just x) request respond
{-# INLINEABLE optionalHeader #-}

requiredHeader ::
  (FromHttpApiData a) =>
  HeaderName ->
  (a -> Wai.Application) ->
  Wai.Application
requiredHeader name withHeader = \request respond ->
  case List.lookup name (Wai.requestHeaders request) of
    Nothing ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Just value ->
      case parseHeader value of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right x ->
          withHeader x request respond
{-# INLINEABLE requiredHeader #-}

data BodyParser a
  = BodyParser
      Network.HTTP.Media.MediaType
      ((a -> Wai.Application) -> Wai.Application)

jsonBodyParser :: (FromJSON a) => BodyParser a
jsonBodyParser = BodyParser "application/json" parseRequestBodyJSON
{-# INLINE jsonBodyParser #-}

formBodyParser :: (FromForm a) => BodyParser a
formBodyParser = BodyParser "application/xxx-form-urlencoded" parseRequestBodyForm
{-# INLINE formBodyParser #-}

parseRequestBody :: [BodyParser a] -> (a -> Wai.Application) -> Wai.Application
parseRequestBody parsers withBody = \request respond -> do
  let contentType =
        fromMaybe
          "application/octet-stream"
          (List.lookup hContentType (Wai.requestHeaders request))

      bodyParser =
        Network.HTTP.Media.mapAccept
          [(mediaType, parser) | BodyParser mediaType parser <- parsers]
          contentType

  case bodyParser of
    Just parseBody ->
      parseBody withBody request respond
    Nothing ->
      respond (Wai.responseBuilder (toEnum 415) [] mempty)
{-# INLINE parseRequestBody #-}

parseRequestBodyJSON :: (FromJSON a) => (a -> Wai.Application) -> Wai.Application
parseRequestBodyJSON withBody = \request respond -> do
  result <- parseWith (Wai.getRequestBodyChunk request) Data.Aeson.Parser.json' mempty
  case eitherResult result of
    Left _err ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Right value ->
      case Data.Aeson.Types.parseEither Data.Aeson.parseJSON value of
        Left _err ->
          respond (Wai.responseBuilder (toEnum 400) [] mempty)
        Right body ->
          withBody body request respond
{-# INLINEABLE parseRequestBodyJSON #-}

parseRequestBodyForm :: (FromForm a) => (a -> Wai.Application) -> Wai.Application
parseRequestBodyForm withBody = \request respond -> do
  -- Reads the body using lazy IO. Not great but it gets us
  -- going and is pretty local.
  let getBodyBytes :: IO [ByteString]
      getBodyBytes = do
        chunk <- Wai.getRequestBodyChunk request
        case chunk of
          "" -> pure []
          _ -> do
            rest <- unsafeInterleaveIO getBodyBytes
            pure (chunk : rest)

  bytes <- getBodyBytes
  case urlDecodeAsForm (LBS.fromChunks bytes) of
    Left _err ->
      respond (Wai.responseBuilder (toEnum 400) [] mempty)
    Right form ->
      withBody form request respond
{-# INLINEABLE parseRequestBodyForm #-}

---------------------
Test/Response.hs

module Test.Response
  ( ToResponse (..),

    -- * NDJSON support
    NDJSON,
    responseNDJSON,
  )
where

import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.ByteString.Builder
import qualified Network.HTTP.Types
import qualified Network.Wai

type NDJSON element = ((element -> IO ()) -> IO () -> IO ())

responseNDJSON :: (Data.Aeson.ToJSON element) => Network.HTTP.Types.Status -> Network.HTTP.Types.ResponseHeaders -> NDJSON element -> Network.Wai.Response
responseNDJSON status responseHeaders stream =
  Network.Wai.responseStream status responseHeaders $ \emit flush ->
    stream
      ( \element ->
          emit
            ( Data.Aeson.Encoding.fromEncoding (Data.Aeson.toEncoding element)
                <> Data.ByteString.Builder.char7 '\n'
            )
      )
      flush

class ToResponse a where
  toResponse :: a -> Network.Wai.Response

---------------------
Test/Response/ListPackages.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Response.ListPackages where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData

import Test.Schemas.PetOrPackage

import Test.Response

data ListPackagesResponse
    = ListPackagesResponse200 PetOrPackage
    deriving (Show)

instance ToResponse ListPackagesResponse where
    toResponse (ListPackagesResponse200 x) =
        Network.Wai.responseBuilder Network.HTTP.Types.status200 ([(Network.HTTP.Types.hContentType, "application/json")]) (Data.Aeson.fromEncoding (Data.Aeson.toEncoding x))

instance GHC.Records.HasField "status" ListPackagesResponse Network.HTTP.Types.Status where
    getField (ListPackagesResponse200 {}) = Network.HTTP.Types.status200
---------------------
Test/Response/ListPackages2.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Response.ListPackages2 where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData

import Test.Schemas.Inline

import Test.Response

data ListPackages2Response
    = ListPackages2Response200 Inline
    deriving (Show)

instance ToResponse ListPackages2Response where
    toResponse (ListPackages2Response200 x) =
        Network.Wai.responseBuilder Network.HTTP.Types.status200 ([(Network.HTTP.Types.hContentType, "application/json")]) (Data.Aeson.fromEncoding (Data.Aeson.toEncoding x))

instance GHC.Records.HasField "status" ListPackages2Response Network.HTTP.Types.Status where
    getField (ListPackages2Response200 {}) = Network.HTTP.Types.status200
---------------------
Test/Response/ListPackages3.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Response.ListPackages3 where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData

import Test.Schemas.Inline2

import Test.Response

data ListPackages3Response
    = ListPackages3Response200 Inline2
    deriving (Show)

instance ToResponse ListPackages3Response where
    toResponse (ListPackages3Response200 x) =
        Network.Wai.responseBuilder Network.HTTP.Types.status200 ([(Network.HTTP.Types.hContentType, "application/json")]) (Data.Aeson.fromEncoding (Data.Aeson.toEncoding x))

instance GHC.Records.HasField "status" ListPackages3Response Network.HTTP.Types.Status where
    getField (ListPackages3Response200 {}) = Network.HTTP.Types.status200
---------------------
Test/Schemas/Inline.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.Inline where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.Package

data InlineValue
    = InlineValueInlineValueOneOf1 GHC.Int.Int
    | InlineValueInlineValueOneOf2 Data.Text.Text
    | InlineValuePackage Package
    deriving (Show)

instance Data.Aeson.ToJSON InlineValue where
    toJSON (InlineValueInlineValueOneOf1 x) = Data.Aeson.toJSON x
    toJSON (InlineValueInlineValueOneOf2 x) = Data.Aeson.toJSON x
    toJSON (InlineValuePackage x) = Data.Aeson.toJSON x

    toEncoding (InlineValueInlineValueOneOf1 x) = Data.Aeson.toEncoding x
    toEncoding (InlineValueInlineValueOneOf2 x) = Data.Aeson.toEncoding x
    toEncoding (InlineValuePackage x) = Data.Aeson.toEncoding x

instance Data.Aeson.FromJSON InlineValue where
    parseJSON x =
        (InlineValueInlineValueOneOf1 <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (InlineValueInlineValueOneOf2 <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (InlineValuePackage <$> Data.Aeson.parseJSON x)

newtype Inline = Inline
    {
        value :: (Data.Maybe.Maybe (InlineValue))
    }
    deriving (Show)

instance Data.Aeson.ToJSON Inline where
    toJSON Inline {..} = Data.Aeson.object
        ([ 
        ]
        ++ [ "value" Data.Aeson..= value | Just value <- [value] ])

    toEncoding Inline {..} = Data.Aeson.Encoding.pairs
        ( maybe mempty (Data.Aeson.Encoding.pair "value" . Data.Aeson.toEncoding) value
        )

instance Data.Aeson.FromJSON Inline where
    parseJSON = Data.Aeson.withObject "Inline" $ \o ->
        Inline
            <$> o Data.Aeson..:? "value"
---------------------
Test/Schemas/Inline2.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.Inline2 where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.Package

data Inline2Value
    = Inline2ValueInline2ValueOneOf1 GHC.Int.Int
    | Inline2ValueInline2ValueOneOf2 Data.Text.Text
    | Inline2ValueInline2ValueOneOf3 Inline2ValueOneOf3
    deriving (Show)

instance Data.Aeson.ToJSON Inline2Value where
    toJSON (Inline2ValueInline2ValueOneOf1 x) = Data.Aeson.toJSON x
    toJSON (Inline2ValueInline2ValueOneOf2 x) = Data.Aeson.toJSON x
    toJSON (Inline2ValueInline2ValueOneOf3 x) = Data.Aeson.toJSON x

    toEncoding (Inline2ValueInline2ValueOneOf1 x) = Data.Aeson.toEncoding x
    toEncoding (Inline2ValueInline2ValueOneOf2 x) = Data.Aeson.toEncoding x
    toEncoding (Inline2ValueInline2ValueOneOf3 x) = Data.Aeson.toEncoding x

instance Data.Aeson.FromJSON Inline2Value where
    parseJSON x =
        (Inline2ValueInline2ValueOneOf1 <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (Inline2ValueInline2ValueOneOf2 <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (Inline2ValueInline2ValueOneOf3 <$> Data.Aeson.parseJSON x)

data Inline2ValueOneOf3
    = Inline2ValueOneOf3Inline2ValueOneOf3OneOf1 GHC.Float.Double
    | Inline2ValueOneOf3Package Package
    deriving (Show)

instance Data.Aeson.ToJSON Inline2ValueOneOf3 where
    toJSON (Inline2ValueOneOf3Inline2ValueOneOf3OneOf1 x) = Data.Aeson.toJSON x
    toJSON (Inline2ValueOneOf3Package x) = Data.Aeson.toJSON x

    toEncoding (Inline2ValueOneOf3Inline2ValueOneOf3OneOf1 x) = Data.Aeson.toEncoding x
    toEncoding (Inline2ValueOneOf3Package x) = Data.Aeson.toEncoding x

instance Data.Aeson.FromJSON Inline2ValueOneOf3 where
    parseJSON x =
        (Inline2ValueOneOf3Inline2ValueOneOf3OneOf1 <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (Inline2ValueOneOf3Package <$> Data.Aeson.parseJSON x)

newtype Inline2 = Inline2
    {
        value :: (Data.Maybe.Maybe (Inline2Value))
    }
    deriving (Show)

instance Data.Aeson.ToJSON Inline2 where
    toJSON Inline2 {..} = Data.Aeson.object
        ([ 
        ]
        ++ [ "value" Data.Aeson..= value | Just value <- [value] ])

    toEncoding Inline2 {..} = Data.Aeson.Encoding.pairs
        ( maybe mempty (Data.Aeson.Encoding.pair "value" . Data.Aeson.toEncoding) value
        )

instance Data.Aeson.FromJSON Inline2 where
    parseJSON = Data.Aeson.withObject "Inline2" $ \o ->
        Inline2
            <$> o Data.Aeson..:? "value"
---------------------
Test/Schemas/Package.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.Package where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData





data PackageEnumFieldName
    = PackageEnumFieldNameName1
    | PackageEnumFieldNameName2
    | PackageEnumFieldNameName3
    deriving (Eq, Show)

instance Data.Aeson.ToJSON PackageEnumFieldName where
    toJSON x = case x of
        PackageEnumFieldNameName1 -> "Name1"
        PackageEnumFieldNameName2 -> "Name2"
        PackageEnumFieldNameName3 -> "Name3"

    toEncoding x = case x of
        PackageEnumFieldNameName1 -> Data.Aeson.Encoding.text "Name1"
        PackageEnumFieldNameName2 -> Data.Aeson.Encoding.text "Name2"
        PackageEnumFieldNameName3 -> Data.Aeson.Encoding.text "Name3"

instance Data.Aeson.FromJSON PackageEnumFieldName where
    parseJSON = Data.Aeson.withText "PackageEnumFieldName" $ \s ->
        case s of
            "Name1" -> pure PackageEnumFieldNameName1
            "Name2" -> pure PackageEnumFieldNameName2
            "Name3" -> pure PackageEnumFieldNameName3
            _ -> fail "invalid enum value"

instance Web.HttpApiData.ToHttpApiData PackageEnumFieldName where
    toQueryParam x = case x of
        PackageEnumFieldNameName1 -> "Name1"
        PackageEnumFieldNameName2 -> "Name2"
        PackageEnumFieldNameName3 -> "Name3"

instance Web.HttpApiData.FromHttpApiData PackageEnumFieldName where
    parseUrlPiece x =
        case x of
            "Name1" -> pure PackageEnumFieldNameName1
            "Name2" -> pure PackageEnumFieldNameName2
            "Name3" -> pure PackageEnumFieldNameName3
            _ -> Left "invalid enum value"

data PackageOneOfFieldName
    = PackageOneOfFieldNamePackageOneOfFieldNameOneOf1 Data.Text.Text
    | PackageOneOfFieldNamePackageOneOfFieldNameOneOf2 [ Data.Text.Text ]
    deriving (Show)

instance Data.Aeson.ToJSON PackageOneOfFieldName where
    toJSON (PackageOneOfFieldNamePackageOneOfFieldNameOneOf1 x) = Data.Aeson.toJSON x
    toJSON (PackageOneOfFieldNamePackageOneOfFieldNameOneOf2 x) = Data.Aeson.toJSON x

    toEncoding (PackageOneOfFieldNamePackageOneOfFieldNameOneOf1 x) = Data.Aeson.toEncoding x
    toEncoding (PackageOneOfFieldNamePackageOneOfFieldNameOneOf2 x) = Data.Aeson.toEncoding x

instance Data.Aeson.FromJSON PackageOneOfFieldName where
    parseJSON x =
        (PackageOneOfFieldNamePackageOneOfFieldNameOneOf1 <$> Data.Aeson.parseJSON x) Control.Applicative.<|>
        (PackageOneOfFieldNamePackageOneOfFieldNameOneOf2 <$> Data.Aeson.parseJSON x)

data Package = Package
    {
        enumFieldName :: (Data.Maybe.Maybe (PackageEnumFieldName)),
        oneOfFieldName :: (Data.Maybe.Maybe (PackageOneOfFieldName)),
        type' :: (Data.Maybe.Maybe (Data.Text.Text))
    }
    deriving (Show)

instance Data.Aeson.ToJSON Package where
    toJSON Package {..} = Data.Aeson.object
        ([ 
        ]
        ++ [ "enum_field_name" Data.Aeson..= enumFieldName | Just enumFieldName <- [enumFieldName] ]
        ++ [ "one_of_field_name" Data.Aeson..= oneOfFieldName | Just oneOfFieldName <- [oneOfFieldName] ]
        ++ [ "type" Data.Aeson..= type' | Just type' <- [type'] ])

    toEncoding Package {..} = Data.Aeson.Encoding.pairs
        ( maybe mempty (Data.Aeson.Encoding.pair "enum_field_name" . Data.Aeson.toEncoding) enumFieldName <>
          maybe mempty (Data.Aeson.Encoding.pair "one_of_field_name" . Data.Aeson.toEncoding) oneOfFieldName <>
          maybe mempty (Data.Aeson.Encoding.pair "type" . Data.Aeson.toEncoding) type'
        )

instance Data.Aeson.FromJSON Package where
    parseJSON = Data.Aeson.withObject "Package" $ \o ->
        Package
            <$> o Data.Aeson..:? "enum_field_name"
            <*> o Data.Aeson..:? "one_of_field_name"
            <*> o Data.Aeson..:? "type"
---------------------
Test/Schemas/Pet.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.Pet where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData





newtype Pet = Pet
    {
        type' :: (Data.Maybe.Maybe (Data.Text.Text))
    }
    deriving (Show)

instance Data.Aeson.ToJSON Pet where
    toJSON Pet {..} = Data.Aeson.object
        ([ 
        ]
        ++ [ "type" Data.Aeson..= type' | Just type' <- [type'] ])

    toEncoding Pet {..} = Data.Aeson.Encoding.pairs
        ( maybe mempty (Data.Aeson.Encoding.pair "type" . Data.Aeson.toEncoding) type'
        )

instance Data.Aeson.FromJSON Pet where
    parseJSON = Data.Aeson.withObject "Pet" $ \o ->
        Pet
            <$> o Data.Aeson..:? "type"
---------------------
Test/Schemas/PetOrPackage.hs

{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
module Test.Schemas.PetOrPackage where

import qualified Control.Applicative
import qualified Control.Exception
import qualified Control.Monad
import qualified Control.Monad.IO.Class
import qualified Data.Aeson
import qualified Data.Aeson.Encoding
import qualified Data.Aeson.Parser
import qualified Data.Aeson.Types
import qualified Data.Attoparsec.ByteString
import qualified Data.ByteString
import qualified Data.List
import qualified Data.List.NonEmpty
import qualified Data.Map
import qualified Data.Maybe
import qualified Data.Text
import qualified Data.Time
import qualified Data.Text.Encoding
import qualified GHC.Float
import qualified GHC.Int
import qualified GHC.Records
import qualified GHC.Types
import qualified Network.HTTP.Types
import qualified Network.Wai
import qualified Web.HttpApiData



import Test.Schemas.Package
import Test.Schemas.Pet

data PetOrPackage
    = PetOrPackagePet Pet
    | PetOrPackagePackage Package
    deriving (Show)

instance Data.Aeson.ToJSON PetOrPackage where
    toJSON (PetOrPackagePet x) = Data.Aeson.toJSON x
    toJSON (PetOrPackagePackage x) = Data.Aeson.toJSON x

    toEncoding (PetOrPackagePet x) = Data.Aeson.toEncoding x
    toEncoding (PetOrPackagePackage x) = Data.Aeson.toEncoding x

instance Data.Aeson.FromJSON PetOrPackage where
    parseJSON x =
        (PetOrPackagePet <$> (Data.Aeson.Types.withObject "Pet" $ \o ->
            do ("pet" :: Data.Text.Text) <- o Data.Aeson..: "type"
               Data.Aeson.parseJSON (Data.Aeson.Object o)
        ) x) Control.Applicative.<|>
        (PetOrPackagePackage <$> (Data.Aeson.Types.withObject "Package" $ \o ->
            do ("package" :: Data.Text.Text) <- o Data.Aeson..: "type"
               Data.Aeson.parseJSON (Data.Aeson.Object o)
        ) x)
---------------------
test.cabal

cabal-version: 3.0
name: test
version: 0.1.0.0
library
  build-depends:
    , aeson
    , attoparsec
    , base
    , bytestring
    , containers
    , ghc-prim
    , http-api-data
    , http-media
    , http-types
    , text
    , time
    , unordered-containers
    , wai
  exposed-modules:
    Test.Api
    Test.Request
    Test.Response
    Test.Response.ListPackages
    Test.Response.ListPackages2
    Test.Response.ListPackages3
    Test.Schemas.Inline
    Test.Schemas.Inline2
    Test.Schemas.Package
    Test.Schemas.Pet
    Test.Schemas.PetOrPackage